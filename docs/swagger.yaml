basePath: /api/v1
definitions:
  models.FormativeAssessmentResponseDTO:
    properties:
      difficulty:
        type: string
      id:
        type: integer
      multi_choice_questions:
        items:
          $ref: '#/definitions/models.MultiChoiceQuestionDTO'
        type: array
      points:
        type: integer
      randomisation:
        type: boolean
      short_answer_questions:
        items:
          $ref: '#/definitions/models.ShortAnswerQuestionDTO'
        type: array
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      topic:
        type: string
    type: object
  models.MultiChoiceAnswerDTO:
    properties:
      content:
        type: string
      is_correct:
        type: boolean
    type: object
  models.MultiChoiceQuestionDTO:
    properties:
      answers:
        items:
          $ref: '#/definitions/models.MultiChoiceAnswerDTO'
        type: array
      credit:
        type: integer
      description:
        type: string
      difficulty:
        type: string
      feedback:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  models.ShortAnswerQuestionDTO:
    properties:
      correct_answer:
        type: string
      credit:
        type: integer
      description:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: charlie_j107+aat-backend-swagger@outlook.com
    name: Charlie
  description: This is the backend RESTful API for the Auto Assessment Tool.
  license:
    name: MPL-2.0
    url: https://www.mozilla.org/en-US/MPL/2.0/
  title: Auto Assessment Tool backend RESTful API
  version: "1.0"
paths:
  /formative-assessments:
    get:
      description: Get all formative assessments
      parameters:
      - description: Tags to filter assessments
        in: query
        name: tags
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.FormativeAssessmentResponseDTO'
            type: array
      summary: Get all formative assessments
      tags:
      - FormativeAssessments
    post:
      description: Create a formative assessment
      parameters:
      - description: Formative assessment
        in: body
        name: formativeAssessment
        required: true
        schema:
          $ref: '#/definitions/models.FormativeAssessmentResponseDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.FormativeAssessmentResponseDTO'
      summary: Create a formative assessment
      tags:
      - FormativeAssessments
  /formative-assessments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete formative assessment
      parameters:
      - description: Formative assessment id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FormativeAssessmentResponseDTO'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Delete formative assessment
      tags:
      - FormativeAssessment
    get:
      description: Get a formative assessment
      parameters:
      - description: Formative assessment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FormativeAssessmentResponseDTO'
      summary: Get a formative assessment
      tags:
      - FormativeAssessments
    put:
      description: Update a formative assessment
      parameters:
      - description: Formative assessment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Formative assessment
        in: body
        name: formativeAssessment
        required: true
        schema:
          $ref: '#/definitions/models.FormativeAssessmentResponseDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FormativeAssessmentResponseDTO'
      summary: Update a formative assessment
      tags:
      - FormativeAssessments
  /multi-choice:
    get:
      description: Get all multi choice questions
      parameters:
      - description: Tags to filter questions
        in: query
        name: tags
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.MultiChoiceQuestionDTO'
            type: array
      summary: Get all multi choice questions
      tags:
      - MultiChoiceQuestions
    post:
      consumes:
      - application/json
      description: Create a multi choice question
      parameters:
      - description: Question to create
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/models.MultiChoiceQuestionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MultiChoiceQuestionDTO'
        "400":
          description: Invalid request body
          schema:
            type: string
      summary: Create a multi choice question
      tags:
      - MultiChoiceQuestions
  /multi-choice/{id}:
    delete:
      description: Delete a multi choice question
      parameters:
      - description: ID of the question
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Question deleted
          schema:
            type: string
      summary: Delete a multi choice question
      tags:
      - MultiChoiceQuestions
    get:
      description: Get a multi choice question
      parameters:
      - description: ID of the question
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MultiChoiceQuestionDTO'
      summary: Get a multi choice question
      tags:
      - MultiChoiceQuestions
    put:
      consumes:
      - application/json
      description: Update a multi choice question
      parameters:
      - description: ID of the question
        in: path
        name: id
        required: true
        type: string
      - description: Question to update
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/models.MultiChoiceQuestionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MultiChoiceQuestionDTO'
        "400":
          description: Invalid request body
          schema:
            type: string
      summary: Update a multi choice question
      tags:
      - MultiChoiceQuestions
  /short-answer:
    get:
      description: Get all short answer questions
      parameters:
      - description: Tags to filter questions
        in: query
        name: tags
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ShortAnswerQuestionDTO'
            type: array
      summary: Get all short answer questions
      tags:
      - ShortAnswerQuestions
    post:
      description: Create a short answer question
      parameters:
      - description: Question to create
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/models.ShortAnswerQuestionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ShortAnswerQuestionDTO'
      summary: Create a short answer question
      tags:
      - ShortAnswerQuestions
  /short-answer/{id}:
    delete:
      description: Delete a short answer question
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ShortAnswerQuestionDTO'
      summary: Delete a short answer question
      tags:
      - ShortAnswerQuestions
    get:
      description: Get a short answer question
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ShortAnswerQuestionDTO'
      summary: Get a short answer question
      tags:
      - ShortAnswerQuestions
    put:
      description: Update a short answer question
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      - description: Question to update
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/models.ShortAnswerQuestionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ShortAnswerQuestionDTO'
      summary: Update a short answer question
      tags:
      - ShortAnswerQuestions
swagger: "2.0"
