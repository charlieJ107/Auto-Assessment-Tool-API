# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Auto Assessment Tool

on:
  push:
    branches: [ "master", "develop" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "master", "develop" ]

jobs:
  build_and_test_on_linux:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: aat
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Build
        run: go build -o AAT_Api-linux-x64-${{github.sha}} -v AAT_Api

      - name: Upload Built Binary
        uses: actions/upload-artifact@v3
        with:
          name: AAT_Api-linux-x64-${{ github.sha }}
          path: AAT_Api-linux-x64-${{ github.sha }}

      - name: Test
        env:
          DB_HOST: localhost
          DB_USER: ${{ secrets.POSTGRES_USER }}
          DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_NAME: aat
          DB_PORT: 5432
        run: go test -v ./...

  build_on_windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Build
        run: go build -o AAT_Api-windows-x64-${{github.sha}}.exe -v AAT_Api

      - name: Upload Built Binary
        uses: actions/upload-artifact@v3
        with:
          name: AAT_Api-windows-x64-${{ github.sha }}
          path: AAT_Api-windows-x64-${{ github.sha }}.exe

  release_docker:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
